// Generated by gencpp from file turtlesim/GetCameraImageRequest.msg
// DO NOT EDIT!


#ifndef TURTLESIM_MESSAGE_GETCAMERAIMAGEREQUEST_H
#define TURTLESIM_MESSAGE_GETCAMERAIMAGEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <turtlesim/Pose.h>

namespace turtlesim
{
template <class ContainerAllocator>
struct GetCameraImageRequest_
{
  typedef GetCameraImageRequest_<ContainerAllocator> Type;

  GetCameraImageRequest_()
    : name()
    , frame_pixel_size(0)
    , cell_count(0)
    , x_offset(0)
    , goal()
    , show_matrix_cells_and_goal(false)  {
    }
  GetCameraImageRequest_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , frame_pixel_size(0)
    , cell_count(0)
    , x_offset(0)
    , goal(_alloc)
    , show_matrix_cells_and_goal(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef int16_t _frame_pixel_size_type;
  _frame_pixel_size_type frame_pixel_size;

   typedef int16_t _cell_count_type;
  _cell_count_type cell_count;

   typedef int16_t _x_offset_type;
  _x_offset_type x_offset;

   typedef  ::turtlesim::Pose_<ContainerAllocator>  _goal_type;
  _goal_type goal;

   typedef uint8_t _show_matrix_cells_and_goal_type;
  _show_matrix_cells_and_goal_type show_matrix_cells_and_goal;





  typedef boost::shared_ptr< ::turtlesim::GetCameraImageRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::turtlesim::GetCameraImageRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetCameraImageRequest_

typedef ::turtlesim::GetCameraImageRequest_<std::allocator<void> > GetCameraImageRequest;

typedef boost::shared_ptr< ::turtlesim::GetCameraImageRequest > GetCameraImageRequestPtr;
typedef boost::shared_ptr< ::turtlesim::GetCameraImageRequest const> GetCameraImageRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::turtlesim::GetCameraImageRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::turtlesim::GetCameraImageRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::turtlesim::GetCameraImageRequest_<ContainerAllocator1> & lhs, const ::turtlesim::GetCameraImageRequest_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.frame_pixel_size == rhs.frame_pixel_size &&
    lhs.cell_count == rhs.cell_count &&
    lhs.x_offset == rhs.x_offset &&
    lhs.goal == rhs.goal &&
    lhs.show_matrix_cells_and_goal == rhs.show_matrix_cells_and_goal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::turtlesim::GetCameraImageRequest_<ContainerAllocator1> & lhs, const ::turtlesim::GetCameraImageRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace turtlesim

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::turtlesim::GetCameraImageRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtlesim::GetCameraImageRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtlesim::GetCameraImageRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtlesim::GetCameraImageRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlesim::GetCameraImageRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlesim::GetCameraImageRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::turtlesim::GetCameraImageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b88844795ddd586031f3b49efb235166";
  }

  static const char* value(const ::turtlesim::GetCameraImageRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb88844795ddd5860ULL;
  static const uint64_t static_value2 = 0x31f3b49efb235166ULL;
};

template<class ContainerAllocator>
struct DataType< ::turtlesim::GetCameraImageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "turtlesim/GetCameraImageRequest";
  }

  static const char* value(const ::turtlesim::GetCameraImageRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::turtlesim::GetCameraImageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"int16 frame_pixel_size\n"
"int16 cell_count\n"
"int16 x_offset\n"
"turtlesim/Pose goal\n"
"bool show_matrix_cells_and_goal\n"
"\n"
"================================================================================\n"
"MSG: turtlesim/Pose\n"
"float32 x\n"
"float32 y\n"
"float32 theta\n"
"\n"
"float32 linear_velocity\n"
"float32 angular_velocity\n"
;
  }

  static const char* value(const ::turtlesim::GetCameraImageRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::turtlesim::GetCameraImageRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.frame_pixel_size);
      stream.next(m.cell_count);
      stream.next(m.x_offset);
      stream.next(m.goal);
      stream.next(m.show_matrix_cells_and_goal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetCameraImageRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::turtlesim::GetCameraImageRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::turtlesim::GetCameraImageRequest_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "frame_pixel_size: ";
    Printer<int16_t>::stream(s, indent + "  ", v.frame_pixel_size);
    s << indent << "cell_count: ";
    Printer<int16_t>::stream(s, indent + "  ", v.cell_count);
    s << indent << "x_offset: ";
    Printer<int16_t>::stream(s, indent + "  ", v.x_offset);
    s << indent << "goal: ";
    s << std::endl;
    Printer< ::turtlesim::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
    s << indent << "show_matrix_cells_and_goal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.show_matrix_cells_and_goal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TURTLESIM_MESSAGE_GETCAMERAIMAGEREQUEST_H
