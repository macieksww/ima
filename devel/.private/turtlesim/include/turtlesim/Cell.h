// Generated by gencpp from file turtlesim/Cell.msg
// DO NOT EDIT!


#ifndef TURTLESIM_MESSAGE_CELL_H
#define TURTLESIM_MESSAGE_CELL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace turtlesim
{
template <class ContainerAllocator>
struct Cell_
{
  typedef Cell_<ContainerAllocator> Type;

  Cell_()
    : red(0.0)
    , green(0.0)
    , blue(0.0)
    , distance(0.0)
    , occupy(0.0)  {
    }
  Cell_(const ContainerAllocator& _alloc)
    : red(0.0)
    , green(0.0)
    , blue(0.0)
    , distance(0.0)
    , occupy(0.0)  {
  (void)_alloc;
    }



   typedef float _red_type;
  _red_type red;

   typedef float _green_type;
  _green_type green;

   typedef float _blue_type;
  _blue_type blue;

   typedef float _distance_type;
  _distance_type distance;

   typedef float _occupy_type;
  _occupy_type occupy;





  typedef boost::shared_ptr< ::turtlesim::Cell_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::turtlesim::Cell_<ContainerAllocator> const> ConstPtr;

}; // struct Cell_

typedef ::turtlesim::Cell_<std::allocator<void> > Cell;

typedef boost::shared_ptr< ::turtlesim::Cell > CellPtr;
typedef boost::shared_ptr< ::turtlesim::Cell const> CellConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::turtlesim::Cell_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::turtlesim::Cell_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::turtlesim::Cell_<ContainerAllocator1> & lhs, const ::turtlesim::Cell_<ContainerAllocator2> & rhs)
{
  return lhs.red == rhs.red &&
    lhs.green == rhs.green &&
    lhs.blue == rhs.blue &&
    lhs.distance == rhs.distance &&
    lhs.occupy == rhs.occupy;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::turtlesim::Cell_<ContainerAllocator1> & lhs, const ::turtlesim::Cell_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace turtlesim

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::turtlesim::Cell_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtlesim::Cell_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtlesim::Cell_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtlesim::Cell_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlesim::Cell_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlesim::Cell_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::turtlesim::Cell_<ContainerAllocator> >
{
  static const char* value()
  {
    return "688818a433dd67daefd39f411918d8b4";
  }

  static const char* value(const ::turtlesim::Cell_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x688818a433dd67daULL;
  static const uint64_t static_value2 = 0xefd39f411918d8b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::turtlesim::Cell_<ContainerAllocator> >
{
  static const char* value()
  {
    return "turtlesim/Cell";
  }

  static const char* value(const ::turtlesim::Cell_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::turtlesim::Cell_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 red\n"
"float32 green \n"
"float32 blue\n"
"float32 distance \n"
"float32 occupy \n"
;
  }

  static const char* value(const ::turtlesim::Cell_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::turtlesim::Cell_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.red);
      stream.next(m.green);
      stream.next(m.blue);
      stream.next(m.distance);
      stream.next(m.occupy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Cell_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::turtlesim::Cell_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::turtlesim::Cell_<ContainerAllocator>& v)
  {
    s << indent << "red: ";
    Printer<float>::stream(s, indent + "  ", v.red);
    s << indent << "green: ";
    Printer<float>::stream(s, indent + "  ", v.green);
    s << indent << "blue: ";
    Printer<float>::stream(s, indent + "  ", v.blue);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "occupy: ";
    Printer<float>::stream(s, indent + "  ", v.occupy);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TURTLESIM_MESSAGE_CELL_H
